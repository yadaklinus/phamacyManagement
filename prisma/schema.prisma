// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "generated/database"
}

// Offline database (SQLite) - Main database
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum mode {
  dark
  light
}

enum role {
  admin
  physician
  pharmacist
  receptionist
  nurse
}

enum unit {
  kg
  piece
  liter
  meter
  tablet
  capsule
  ml
  mg
  bottle
  tube
  sachet
}

enum type {
  COMPANY
  INDIVIDUAL
  GOVERNMENT
  NON_PROFIT
  retail
  wholesale
}

enum priority {
  emergency
  urgent
  normal
}

enum consultationStatus {
  waiting
  in_progress
  completed
  cancelled
  referred
}

enum prescriptionStatus {
  pending
  approved
  dispensed
  partially_dispensed
  cancelled
  expired
}

model superAdmin {
  id           String    @id @default(uuid())
  userName     String
  email        String    @unique
  password     String
  role         String
  lastLogin    DateTime?
  sync         Boolean   @default(false)
  syncedAt     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isDeleted    Boolean   @default(false)
}

model users {
  id           String    @id @default(uuid())
  email        String
  userName     String    @unique
  phoneNumber  String
  password     String
  role         role
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  sync         Boolean   @default(false)
  syncedAt     DateTime?
  isDeleted    Boolean   @default(false)
}

model Settings {
  setting_id      Int       @id
  companyName     String
  companyEmail    String
  phoneNumber     String
  websiteURL      String
  address         String
  logoUrl         String
  defaultCurrency String
  taxRate         Int
  mode            mode
  itermsPerPage   Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sync            Boolean   @default(false)
  syncedAt        DateTime?
  isDeleted       Boolean   @default(false)
}

// ==================== PHARMACY MODELS ====================

model Student {
  id                  String                @id @default(uuid())
  matricNumber        String                @unique
  firstName           String
  lastName            String
  otherNames          String?
  email               String?
  phone               String?
  department          String
  level               String                // 100, 200, 300, etc.
  faculty             String
  dateOfBirth         DateTime
  gender              String                // Male, Female
  bloodGroup          String?               // A+, B+, O+, AB+, A-, B-, O-, AB-
  genotype            String?               // AA, AS, SS, AC, SC
  allergies           String?               // JSON or comma-separated
  chronicConditions   String?               // JSON or comma-separated
  emergencyContact    String
  emergencyPhone      String
  profilePhoto        String?
  address             String?
  stateOfOrigin       String?
  nationality         String?               @default("Nigerian")
  isActive            Boolean               @default(true)
  
  // Relations
  consultations       Consultation[]
  prescriptions       Prescription[]
  drugDispensals      DrugDispensal[]
  medicalRecords      MedicalRecord[]
  vitalSigns          VitalSigns[]
  appointments        Appointment[]
  queue               Queue[]
  balanceTransaction  BalanceTransaction[]
  
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  sync                Boolean               @default(false)
  
  isDeleted           Boolean               @default(false)
}

model Physician {
  id                  String          @id @default(uuid())
  staffId             String          @unique
  firstName           String
  lastName            String
  otherNames          String?
  specialization      String
  qualification       String          // MBBS, MD, etc.
  licenseNumber       String
  email               String
  phone               String
  profilePhoto        String?
  isActive            Boolean         @default(true)
  isAvailable         Boolean         @default(true)
  
  // Relations
  consultations       Consultation[]
  prescriptions       Prescription[]
  appointments        Appointment[]
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  sync                Boolean         @default(false)
  
  isDeleted           Boolean         @default(false)
}

model Queue {
  id                  String              @id @default(uuid())
  queueNumber         Int
  studentId           String
  student             Student             @relation(fields: [studentId], references: [id])
  priority            priority            @default(normal)
  status              String              @default("waiting") // waiting, called, in_consultation, completed
  checkInTime         DateTime            @default(now())
  calledTime          DateTime?
  completedTime       DateTime?
  notes               String?
  
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  
  isDeleted           Boolean             @default(false)

  @@index([status])
}

model Appointment {
  id                  String              @id @default(uuid())
  appointmentNo       String              @unique
  studentId           String
  student             Student             @relation(fields: [studentId], references: [id])
  physicianId         String?
  physician           Physician?          @relation(fields: [physicianId], references: [id])
  appointmentDate     DateTime
  appointmentTime     String
  reason              String
  status              String              @default("scheduled") // scheduled, confirmed, cancelled, completed, no_show
  notes               String?
  
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  
  isDeleted           Boolean             @default(false)
}

model VitalSigns {
  id                  String              @id @default(uuid())
  studentId           String
  student             Student             @relation(fields: [studentId], references: [id])
  consultationId      String?
  consultation        Consultation?       @relation(fields: [consultationId], references: [id])
  
  temperature         Float?              // in Celsius
  bloodPressure       String?             // e.g., "120/80"
  pulse               Int?                // beats per minute
  respiratoryRate     Int?                // breaths per minute
  weight              Float?              // in kg
  height              Float?              // in cm
  bmi                 Float?              // calculated
  oxygenSaturation    Int?                // SpO2 percentage
  
  recordedBy          String              // User ID
  
  createdAt           DateTime            @default(now())
  
  
  isDeleted           Boolean             @default(false)
}

model Consultation {
  id                  String              @id @default(uuid())
  consultationNo      String              @unique
  
  // Student Info
  studentId           String
  student             Student             @relation(fields: [studentId], references: [id])
  
  // Physician Info
  physicianId         String
  physician           Physician           @relation(fields: [physicianId], references: [id])
  
  // Consultation Details
  chiefComplaint      String              // Main problem
  historyOfPresenting String?             // Detailed history
  symptoms            String              // JSON array of symptoms
  physicalExamination String?
  diagnosis           String
  differentialDiagnosis String?
  treatmentPlan       String?
  notes               String?
  followUpDate        DateTime?
  
  // Vital Signs
  vitalSigns          VitalSigns[]
  
  // Status
  status              consultationStatus  @default(waiting)
  priority            priority            @default(normal)
  
  // Relations
  prescriptions       Prescription[]
  
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  completedAt         DateTime?
  
  
  isDeleted           Boolean             @default(false)

  @@index([status])
  @@index([physicianId, status])
}

model Prescription {
  id                  String                @id @default(uuid())
  prescriptionNo      String                @unique
  
  // Student & Physician
  studentId           String
  student             Student               @relation(fields: [studentId], references: [id])
  physicianId         String
  physician           Physician             @relation(fields: [physicianId], references: [id])
  
  // Consultation
  consultationId      String
  consultation        Consultation          @relation(fields: [consultationId], references: [id])
  
  // Prescription Details
  prescriptionItems   PrescriptionItem[]
  diagnosis           String
  instructions        String?
  
  // Status & Workflow
  status              prescriptionStatus    @default(pending)
  priority            priority              @default(normal)
  isPaid              Boolean               @default(false)
  isDispensed         Boolean               @default(false)
  dispensedBy         String?               // User ID who dispensed
  dispensedAt         DateTime?
  
  // Pricing
  totalCost           Float                 @default(0)
  amountPaid          Float                 @default(0)
  discount            Float                 @default(0)
  
  // Notifications
  pharmacyNotified    Boolean               @default(false)
  notifiedAt          DateTime?
  studentNotified     Boolean               @default(false)
  
  // Validity
  validUntil          DateTime?
  
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  sync                Boolean               @default(false)
  
  isDeleted           Boolean               @default(false)

  @@index([status])
  @@index([status, priority])
}

model PrescriptionItem {
  id                  String              @id @default(uuid())
  
  prescriptionId      String
  prescription        Prescription        @relation(fields: [prescriptionId], references: [prescriptionNo])
  
  productId           String
  product             Product             @relation(fields: [productId], references: [id])
  
  // Drug Details
  drugName            String
  dosage              String              // e.g., "500mg"
  frequency           String              // e.g., "3 times daily", "Every 8 hours"
  duration            String              // e.g., "7 days", "2 weeks"
  route               String?             // Oral, Topical, IV, IM, etc.
  instructions        String              // e.g., "Take after meals"
  
  quantityPrescribed  Int
  quantityDispensed   Int                 @default(0)
  
  unitPrice           Float
  totalPrice          Float
  
  isDispensed         Boolean             @default(false)
  dispensedAt         DateTime?
  dispensedBy         String?             // User ID
  
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  
  isDeleted           Boolean             @default(false)
}

model DrugDispensal {
  id                  String              @id @default(uuid())
  dispensalNo         String              @unique
  
  prescriptionId      String
  prescriptionNo      String
  studentId           String
  student             Student             @relation(fields: [studentId], references: [id])
  
  dispensedBy         String              // User ID
  dispensedItems      String              // JSON array of dispensed items
  
  totalAmount         Float
  notes               String?
  
  createdAt           DateTime            @default(now())
  
  
  isDeleted           Boolean             @default(false)

  @@index([createdAt])
}

model MedicalRecord {
  id                  String              @id @default(uuid())
  
  studentId           String
  student             Student             @relation(fields: [studentId], references: [id])
  
  recordType          String              // consultation, prescription, lab_result, vaccination, etc.
  title               String
  description         String?
  recordData          String?             // JSON - Flexible data storage
  attachments         String?             // JSON array of file URLs
  
  createdBy           String              // User ID
  
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  
  isDeleted           Boolean             @default(false)

  @@index([studentId, recordType])
}

// ==================== INVENTORY MODELS (Modified for Drugs) ====================

model Product {
  id                  String              @id @default(uuid())
  name                String              // Drug name
  barcode             String
  genericName         String?             // Generic drug name
  brandName           String?             // Brand name
  category            String?             // Antibiotic, Painkiller, etc.
  manufacturer        String?
  batchNumber         String?
  expiryDate          DateTime?
  
  // Pricing
  wholeSalePrice      Float
  retailPrice         Float
  cost                Float
  
  // Stock
  quantity            Int
  reorderLevel        Int?                // When to reorder
  maxStockLevel       Int?
  
  taxRate             Int
  unit                unit
  description         String
  
  // Drug-specific fields
  dosageForm          String?             // Tablet, Capsule, Syrup, Injection
  strength            String?             // 500mg, 250mg/5ml
  requiresPrescription Boolean            @default(true)
  controlledSubstance Boolean            @default(false)
  storageConditions   String?             // Store in cool dry place
  
  // Warehouse
  warehousesId        String?
  warehouse           warehouses?         @relation(fields: [warehousesId], references: [warehouseCode])
  
  // Relations
  prescriptionItems   PrescriptionItem[]
  purchaseItem        PurchaseItem[]
  
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  sync                Boolean             @default(false)
  syncedAt            DateTime?
  
  isDeleted           Boolean             @default(false)

  @@index([expiryDate])
  @@index([quantity])
  @@index([warehousesId])
}

model Purchase {
  id                  String              @id @default(cuid())
  purchaseItem        PurchaseItem[]
  taxRate             Float
  subTotal            Float
  notes               String?
  amountPaid          Float?
  grandTotal          Float
  paidAmount          Float
  balance             Float
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  referenceNo         String              @unique

  
  
  Supplier            Supplier?           @relation(fields: [supplierId], references: [id])
  supplierId          String?
  isDeleted           Boolean             @default(false)
}

model PurchaseItem {
  id                   String             @id @default(cuid())
  productId            String?
  product              Product?           @relation(fields: [productId], references: [id])
  cost                 Float
  productName          String?
  selectedPrice        Float
  priceType            String
  quantity             Int
  discount             Float
  total                Float
  profit               Float
  sync                 Boolean            @default(false)
  syncedAt             DateTime?
  Purchase             Purchase?          @relation(fields: [purchaseId], references: [referenceNo])
  purchaseId           String?
  customRetailPrice    Float?
  customWholesalePrice Float?
  expiryDate           DateTime?
  batchNumber          String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  isDeleted            Boolean            @default(false)
}

model BalanceTransaction {
  id                  String              @id @default(uuid())
  studentId           String
  student             Student             @relation(fields: [studentId], references: [id])
  amount              Float
  type                String              // CREDIT or DEBIT
  description         String
  paymentMethod       String?             // cash, card, bank_transfer, mobile_money
  reference           String?             // Transaction reference
  prescriptionId      String?             // If related to a prescription
  balanceAfter        Float               // Balance after this transaction
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  
  isDeleted           Boolean             @default(false)
}

model Supplier {
  id                  String              @id @default(uuid())
  name                String
  type                String
  companyName         String?
  email               String
  address             String
  phone               String
  purchase            Purchase[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  
  isDeleted           Boolean             @default(false)
}

model ReceiptSettings {
  id                      String              @id @default(uuid())
  companyName             String
  businessName            String
  address                 String
  city                    String
  state                   String
  country                 String
  phone                   String
  email                   String
  website                 String

  // Receipt Configuration
  receiptTitle            String?
  headerMessage           String?
  footerMessage           String?
  showLogo                Boolean?            @default(true)
  logoUrl                 String?
  showQrCode              Boolean?            @default(true)
  qrCodeContent           String?             @default("website")
  customQrContent         String?

  // Display Options
  showStudentInfo         Boolean?            @default(true)
  showPhysicianInfo       Boolean?            @default(true)
  showPharmacistInfo      Boolean?            @default(true)
  showDrugCodes           Boolean?            @default(true)
  showDrugDescriptions    Boolean?            @default(true)
  showDosageInstructions  Boolean?            @default(true)
  showTimestamp           Boolean?            @default(true)
  use24HourFormat         Boolean?            @default(false)

  // Format Settings
  paperSize               String?             @default("80mm")
  fontSize                String?             @default("normal")
  printDensity            String?             @default("normal")
  lineSpacing             String?             @default("normal")

  // Branding
  primaryColor            String?             @default("#000000")
  accentColor             String?             @default("#666666")
  fontFamily              String?             @default("monospace")

  // Additional Settings
  printCopyCount          Int?                @default(1)
  autoPrint               Boolean?            @default(false)
  language                String?             @default("en")
  currency                String?             @default("NGN")
  currencySymbol          String?             @default("₦")
  currencyPosition        String?             @default("before")

  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  sync                    Boolean             @default(false)
  syncedAt                DateTime?
  isDeleted               Boolean             @default(false)
}

// ==================== DRUG INVENTORY MODELS ====================

model Drug {
  id                      String              @id @default(uuid())
  code                    String              // Drug code (e.g., PAI001, ANT002)
  name                    String              // Drug name
  category                String              // Category (Painkillers, Antibiotics, etc.)
  manufacturer            String              // Manufacturer name
  description             String?             // Drug description
  activeIngredient        String?             // Active ingredient
  strength                String?             // Strength/dosage (e.g., 500mg, 10ml)
  dosageForm              String?             // Tablet, Capsule, Syrup, etc.
  
  // Stock Management
  quantity                Int                 @default(0)
  reorderLevel            Int                 @default(0)
  
  // Pricing
  price                   Float               // Selling price
  cost                    Float               // Cost price
  
  // Batch & Expiry
  expiryDate              DateTime
  batchNumber             String
  
  // Additional Info
  unit                    String              @default("Pieces")
  storageConditions       String?
  prescriptionRequired    Boolean             @default(false)
  supplier                String?
  
  // Disposal Info (for expired drugs)
  isDisposed              Boolean             @default(false)
  disposalDate            DateTime?
  disposalMethod          String?
  disposalReason          String?
  disposalNotes           String?
  disposedBy              String?
  
  // Warehouse & Sync
  warehouseId             String
  warehouse               warehouses          @relation(fields: [warehouseId], references: [warehouseCode])
  
  // Audit Fields
  createdBy               String?
  lastStockUpdate         DateTime?
  
  // Relations
  stockMovements          DrugStockMovement[]
  disposalRecords         DrugDisposal[]
  
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  sync                    Boolean             @default(false)
  syncedAt                DateTime?
  isDeleted               Boolean             @default(false)

  @@index([warehouseId, category])
  @@index([warehouseId, expiryDate])
  @@index([warehouseId, quantity])
  @@index([code, warehouseId])
}

model DrugCategory {
  id                      String              @id @default(uuid())
  name                    String              // Category name
  description             String?             // Category description
  color                   String              @default("#3B82F6") // Color for UI
  
  // Warehouse
  warehouseId             String
  warehouse               warehouses          @relation(fields: [warehouseId], references: [warehouseCode])
  
  // Status
  isActive                Boolean             @default(true)
  
  // Audit
  createdBy               String?
  
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  isDeleted               Boolean             @default(false)

  @@index([warehouseId, name])
}

model DrugStockMovement {
  id                      String              @id @default(uuid())
  drugId                  String
  drug                    Drug                @relation(fields: [drugId], references: [id])
  
  type                    String              // 'in', 'out', 'adjustment'
  quantity                Int                 // Quantity moved (positive for in, negative for out)
  reason                  String              // Reason for movement
  reference               String?             // Reference number (invoice, transfer, etc.)
  notes                   String?             // Additional notes
  balanceAfter            Int                 // Stock balance after this movement
  
  // Warehouse
  warehouseId             String
  
  // Audit
  createdBy               String              @default("system")
  
  createdAt               DateTime            @default(now())

  @@index([drugId, createdAt])
  @@index([warehouseId, createdAt])
}

model DrugDisposal {
  id                      String              @id @default(uuid())
  drugId                  String
  drug                    Drug                @relation(fields: [drugId], references: [id])
  
  disposalMethod          String              // Incineration, Return to Supplier, etc.
  disposalReason          String              // Expired, Damaged, etc.
  notes                   String?
  
  // Warehouse
  warehouseId             String
  
  // Audit
  disposedBy              String
  disposalDate            DateTime            @default(now())
  
  createdAt               DateTime            @default(now())

  @@index([drugId])
  @@index([warehouseId, disposalDate])
}

// Add warehouse model if it doesn't exist
model warehouses {
  id                      String              @id @default(uuid())
  warehouseCode           String              @unique
  warehouseName           String
  address                 String?
  city                    String?
  state                   String?
  country                 String?
  phone                   String?
  email                   String?
  
  // Relations
  products                Product[]
  drugs                   Drug[]
  drugCategories          DrugCategory[]
  
  // Status
  isActive                Boolean             @default(true)
  
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  sync                    Boolean             @default(false)
  syncedAt                DateTime?
  isDeleted               Boolean             @default(false)

  @@index([warehouseCode])
}